Для реализации выбрано К-мерное бинарное дерево (несбалансированное, сортированное),
как наиболее подходящее для больших объемов статичных данных с равномерным распределением.
http://ru.wikipedia.org/wiki/K-мерное_дерево

R-деревья хороши в ситуациях, когда данные имеют неоднородную плотность и довольно часто обновляются.
UB-деревья в итоге, насколько я понял, оказались математической абстракцией.

Из бенчмарков видно, что для разных комбинаций условий запроса следует применять разные алгоритмы.
Универсального "самого быстрого" алгоритма не существует

== 100 000 элементов

  MacBook-Pro-Alex:search fotonstep$ ruby search.rb 100000, true
  Init...
  Persons are empty. Generating...
  100000 elements generated
  Tree are empty. Generating...
  Index are empty. Generating...

  {:test=>true}
         user     system      total        real
     0.000000   0.000000   0.000000 (  0.001570)
     0.010000   0.000000   0.010000 (  0.001336)
     0.000000   0.000000   0.000000 (  0.000037)

  {:age=>40..60}
         user     system      total        real
     1.860000   0.050000   1.910000 (  1.917380)
     0.020000   0.000000   0.020000 (  0.018057)
     0.170000   0.000000   0.170000 (  0.179733)

  {:age=>50, :height=>33..181}
         user     system      total        real
     1.750000   0.040000   1.790000 (  1.784649)
     0.520000   0.080000   0.600000 (  0.593170)
     0.030000   0.000000   0.030000 (  0.034733)

  {:age=>10..90, :salary=>4000000.2..7000000.5}
         user     system      total        real
     2.020000   0.030000   2.050000 (  2.055715)
    11.170000   0.760000  11.930000 ( 11.963269)
     0.280000   0.010000   0.290000 (  0.279767)

  {:age=>40..60, :height=>33..181, :weight=>70..130}
         user     system      total        real
     1.830000   0.030000   1.860000 (  1.861362)
     0.700000   0.100000   0.800000 (  0.803556)
     0.080000   0.000000   0.080000 (  0.075449)

  {:age=>20..80, :height=>33..181, :weight=>70..130, :salary=>4000000.2..7000000.5}
         user     system      total        real
     1.940000   0.040000   1.980000 (  1.988824)
     1.330000   0.250000   1.580000 (  1.579858)
     0.080000   0.000000   0.080000 (  0.080273)


== 1 000 000 элементов

  MacBook-Pro-Alex:search fotonstep$ ruby search.rb 1000000
  Init...
  Persons are empty. Generating...
  1000000 elements generated
  Tree are empty. Generating...
  Index are empty. Generating...

  {:test=>true}
         user     system      total        real
     0.000000   0.000000   0.000000 (  0.000080)
     0.000000   0.000000   0.000000 (  0.000032)
     0.000000   0.000000   0.000000 (  0.000032)

  {:age=>40..60}
         user     system      total        real
    14.840000   0.260000  15.100000 ( 15.131841)
     0.120000   0.020000   0.140000 (  0.137241)
     2.020000   0.020000   2.040000 (  2.039985)

  {:age=>50, :height=>33..181}
         user     system      total        real
    14.570000   0.220000  14.790000 ( 14.801023)
     6.100000   0.600000   6.700000 (  6.703007)
     0.250000   0.000000   0.250000 (  0.254130)

  {:age=>10..90, :salary=>4000000.2..7000000.5}
         user     system      total        real
    16.000000   0.260000  16.260000 ( 16.276709)
   596.620000  11.220000 607.840000 (612.858316)
     1.890000   0.020000   1.910000 (  1.908942)

  {:age=>40..60, :height=>33..181, :weight=>70..130}
         user     system      total        real
    15.190000   0.260000  15.450000 ( 15.828795)
     8.110000   0.730000   8.840000 (  8.940456)
     0.460000   0.000000   0.460000 (  0.460705)

  {:age=>20..80, :height=>33..181, :weight=>70..130, :salary=>4000000.2..7000000.5}
         user     system      total        real
    16.860000   0.320000  17.180000 ( 17.469114)
    26.330000   2.010000  28.340000 ( 28.542065)
     0.470000   0.000000   0.470000 (  0.474680)


== 10 000 000 элементов

  MacBook-Pro-Alex:search fotonstep$ ruby search.rb 10000000
  Init...
  Persons are empty. Generating...
  10000000 elements generated
  Tree are empty. Generating...
  Index are empty. Generating...

  {:test=>true}
         user     system      total        real
     0.000000   0.000000   0.000000 (  0.000047)
     0.000000   0.000000   0.000000 (  0.000023)
     0.000000   0.000000   0.000000 (  0.000023)

  {:age=>40..60}
         user     system      total        real
   128.910000   5.850000 134.760000 (143.088701)
     3.340000   0.510000   3.850000 (  4.469833)
    15.110000   1.000000  16.110000 ( 16.921108)

  {:age=>50, :height=>33..181}
         user     system      total        real
   117.800000   3.340000 121.140000 (125.230444)
    70.860000  12.620000  83.480000 (199.900393)
     6.500000   0.030000   6.530000 (  6.629411)

  {:age=>10..90, :salary=>4000000.2..7000000.5}
         user     system      total        real
   120.920000   2.600000 123.520000 (127.585134)
   1432.160000  23.000000 1455.160000 (1478.857994)
   1431.630000  24.420000 1456.050000 (1461.843690)

  {:age=>40..60, :height=>33..181, :weight=>70..130}
         user     system      total        real
   117.040000   1.890000 118.930000 (120.400042)
    71.460000  13.220000  84.680000 (122.874706)
     0.140000   0.010000   0.150000 (  0.142918)

  {:age=>20..80, :height=>33..181, :weight=>70..130, :salary=>4000000.2..7000000.5}
         user     system      total        real
   129.690000   2.560000 132.250000 (135.983697)
   1242.220000  71.000000 1313.220000 (1720.924105)
   49.830000   10.810000  60.640000 ( 61.359314)

Для реализации выбрано К-мерное бинарное дерево (несбалансированное, сортированное),
как наиболее подходящее для больших объемов статичных данных с равномерным распределением.
http://ru.wikipedia.org/wiki/K-мерное_дерево

R-деревья хороши в ситуациях, когда данные имеют неоднородную плотность и довольно часто обновляются.
UB-деревья в итоге, насколько я понял, оказались математической абстракцией.

Из бенчмарков видно, что для разных комбинаций условий запроса следует применять разные алгоритмы.
4-мерное дерево для простого запроса по одному условию - явно избыточно.
Универсального "самого быстрого" алгоритма не существует

== 100 000 элементов

  MacBook-Pro-Alex:search fotonstep$ ruby search.rb 100000, true
  Init...
  Persons are empty. Generating...
  100000 elements generated
  Tree are empty. Generating...
  Index are empty. Generating...

  {:test=>true}
         user     system      total        real
     0.000000   0.000000   0.000000 (  0.001570)
     0.010000   0.000000   0.010000 (  0.001336)
     0.000000   0.000000   0.000000 (  0.000037)

  {:age=>40..60}
         user     system      total        real
     1.860000   0.050000   1.910000 (  1.917380)
     0.020000   0.000000   0.020000 (  0.018057)
     0.170000   0.000000   0.170000 (  0.179733)

  {:age=>50, :height=>33..181}
         user     system      total        real
     1.750000   0.040000   1.790000 (  1.784649)
     0.520000   0.080000   0.600000 (  0.593170)
     0.030000   0.000000   0.030000 (  0.034733)

  {:age=>10..90, :salary=>4000000.2..7000000.5}
         user     system      total        real
     2.020000   0.030000   2.050000 (  2.055715)
    11.170000   0.760000  11.930000 ( 11.963269)
     0.280000   0.010000   0.290000 (  0.279767)

  {:age=>40..60, :height=>33..181, :weight=>70..130}
         user     system      total        real
     1.830000   0.030000   1.860000 (  1.861362)
     0.700000   0.100000   0.800000 (  0.803556)
     0.080000   0.000000   0.080000 (  0.075449)

  {:age=>20..80, :height=>33..181, :weight=>70..130, :salary=>4000000.2..7000000.5}
         user     system      total        real
     1.940000   0.040000   1.980000 (  1.988824)
     1.330000   0.250000   1.580000 (  1.579858)
     0.080000   0.000000   0.080000 (  0.080273)


== 1 000 000 элементов

  MacBook-Pro-Alex:search fotonstep$ ruby search.rb 1000000
  Init...
  Persons are empty. Generating...
  1000000 elements generated
  Tree are empty. Generating...
  Index are empty. Generating...

  {:test=>true}
         user     system      total        real
     0.000000   0.000000   0.000000 (  0.000080)
     0.000000   0.000000   0.000000 (  0.000032)
     0.000000   0.000000   0.000000 (  0.000032)

  {:age=>40..60}
         user     system      total        real
    14.840000   0.260000  15.100000 ( 15.131841)
     0.120000   0.020000   0.140000 (  0.137241)
     2.020000   0.020000   2.040000 (  2.039985)

  {:age=>50, :height=>33..181}
         user     system      total        real
    14.570000   0.220000  14.790000 ( 14.801023)
     6.100000   0.600000   6.700000 (  6.703007)
     0.250000   0.000000   0.250000 (  0.254130)

  {:age=>10..90, :salary=>4000000.2..7000000.5}
         user     system      total        real
    16.000000   0.260000  16.260000 ( 16.276709)
   596.620000  11.220000 607.840000 (612.858316)
     1.890000   0.020000   1.910000 (  1.908942)

  {:age=>40..60, :height=>33..181, :weight=>70..130}
         user     system      total        real
    15.190000   0.260000  15.450000 ( 15.828795)
     8.110000   0.730000   8.840000 (  8.940456)
     0.460000   0.000000   0.460000 (  0.460705)

  {:age=>20..80, :height=>33..181, :weight=>70..130, :salary=>4000000.2..7000000.5}
         user     system      total        real
    16.860000   0.320000  17.180000 ( 17.469114)
    26.330000   2.010000  28.340000 ( 28.542065)
     0.470000   0.000000   0.470000 (  0.474680)


== 10 000 000 элементов

  MacBook-Pro-Alex:search fotonstep$ ruby search.rb 10000000
  Init...
  Persons are empty. Generating...
  10000000 elements generated
  Tree are empty. Generating...
  Index are empty. Generating...

  {:test=>true}
         user     system      total        real
     0.000000   0.000000   0.000000 (  0.000076)
     0.000000   0.000000   0.000000 (  0.000035)
     0.000000   0.000000   0.000000 (  0.000031)

  {:age=>40..60}
         user     system      total        real
   115.360000   2.700000 118.060000 (121.647307)
     7.020000   0.430000   7.450000 (  7.680438)
     9.530000   0.050000   9.580000 (  9.593592)

  {:age=>50, :height=>33..181}
         user     system      total        real
   111.270000   2.950000 114.220000 (116.392065)
    45.430000  10.490000  55.920000 ( 70.704801)
     0.750000   0.000000   0.750000 (  0.880913)

  {:age=>10..90, :salary=>4000000.2..7000000.5}
         user     system      total        real
   124.270000   2.560000 126.830000 (128.130478)
   1430.090000  16.740000 1446.830000 (1451.765345)
    13.570000   0.320000  13.890000 ( 14.305730)

  {:age=>40..60, :height=>33..181, :weight=>70..130}
         user     system      total        real
   115.540000   3.210000 118.750000 (122.224025)
    72.400000  13.920000  86.320000 (128.660346)
     2.860000   0.040000   2.900000 (  2.968779)

  {:age=>20..80, :height=>33..181, :weight=>70..130, :salary=>4000000.2..7000000.5}
         user     system      total        real
   121.430000   3.350000 124.780000 (140.968868)
   1249.630000  73.020000 1322.650000 (1766.037468)
     2.950000   0.020000   2.970000 (  2.975548)
